name: env-updates
on:
  push:
    branches: [stage]

jobs:
  env-updates:
    runs-on: ubuntu-latest
    env:
      HEAD: flowhealth:stage
      BRANCHES: dev-f,dev-h,dev-rnd,dev-minor,preprod
    steps:
      - name: Create Pull-Requests from stage to dev- branches
        uses: actions/github-script@v2
        id: create-pr
        with:
          debug: true
          script: |
            const head = '${{ env.HEAD }}';
            const branches = '${{ env.BRANCHES }}'.split(',');
            const { repo: { owner, repo }, payload: { head_commit, pusher, repository: { html_url }  } } = context;
            const creatPR = async base => {
              try {
                await github.repos.getBranch({
                  owner, repo,
                  branch: base,
                });
              } catch (e) {
                return console.log(`Branch ${base} doesn't exist`);
              }
              let { data: [ pr ] } = await github.pulls.list({
                owner, repo, head, base,
                state: 'open',
              });
              let action; // created|updated
              if (pr) {
                console.log(`PR for ${base} already exist - #${pr.number} ${pr.title}`);
                const { data } = await github.pulls.update({
                  owner, repo,
                  pull_number: pr.number,
                  title: `Update ${base}`,
                });
                action = 'updated';
                pr = data;
              } else {
                try {
                  const { data } = await github.pulls.create({
                    owner, repo, head, base,
                    title: `Update ${base}`,
                  });
                  action = 'created';
                  pr = data;
                } catch (e) {
                  console.log(e.message);
                }
              }
              if (!pr) {
                return;
              }
              if (pr.mergeable_state === 'unknown') {
                await new Promise(res => setTimeout(res, 5000));
                const { number } = pr;
                console.log(`refetch PR #${number} for ${base}`);
                const { data } = await github.pulls.get({
                  owner, repo,
                  pull_number: number,
                });
                pr = data;
              }
              if (pr.mergeable) {
                console.log('Merging PR #', pr.number);
                const tryMerge = async (retries = 0) => {
                  try {
                    await github.pulls.merge({
                      owner, repo,
                      pull_number: pr.number,
                    });
                    action = 'merged';
                  } catch (e) {
                    retries++;
                    if (retries > 3) {
                      throw e;
                    }
                    await setTimeout(() => Promise.resolve(), 3000);
                    await tryMerge(retries);
                  }
                }
                tryMerge();
              }
              console.log(`PR #${pr.number} ${pr.title} for ${base} ${action}`);
              console.log(pr);
              const {
                number,
                html_url,
                title,
                commits,
                additions,
                deletions,
                changed_files,
                mergeable_state,
                mergeable
              } = pr;
              return {
                action, base,
                pr: {
                  number,
                  html_url,
                  title,
                  commits,
                  additions,
                  deletions,
                  changed_files,
                  mergeable_state,
                  mergeable
                },
              };
            };
            const results = await Promise.all(branches.map(branch => creatPR(branch)));
            const output = {
              pusher,
              commit: head_commit,
              repo,
              url: html_url,
              pull_requests: results.filter(result => result),
            };
            console.log(output);
            core.setOutput('data', output);
            core.setOutput('sendSlackMessage', !!results.filter(result => result && !result.pr.mergeable).length);
            return output;
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        id: notify-slack
        if: ${{ steps.create-pr.outputs.sendSlackMessage == 'true' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        with:
          status: custom
          custom_payload: |
            (() => {
              const data = ${{ steps.create-pr.outputs.data }};
              console.log(data);
              const text = `*<${data.url}|${data.repo}>* - <${data.commit.url}|${data.commit.id.slice(0,8)}> _pushed by *${data.pusher.name}*_\n>${data.commit.message}`;
              const attachments = [];
              for ( const { action, base, pr } of data.pull_requests) {
                console.log(pr);
                if (pr.mergeable) continue;
                const attachment = {
                  color: action === 'created' ? 'good' : 'warning',
                  fallback: `${pr.number} ${pr.title} - ${pr.html_url}`,
                  title: `#${pr.number} ${pr.title}`,
                  title_link: pr.html_url,
                  text: `_${action}_ +${pr.additions} -${pr.deletions}`,
                  fields: [
                    {
                      title: 'Commits',
                      value: `${pr.commits}`,
                      short: true,
                    },
                    {
                      title: 'Files',
                      value: `${pr.changed_files}`,
                      short: true,
                    }
                  ]
                };
                if (pr.mergeable_state === 'dirty') attachment.color = 'danger';
                attachments.push(attachment);
                console.log(attachment);
              };
              const payload = {
                text,
                attachments,
              };
              console.log(payload);
              return payload;
            })()
